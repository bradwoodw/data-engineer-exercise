""" 
Metaweather API script

Extracts data from the Metaweather API and stores down in CSV files.
A file is generated for city level data, and one for weather predictions with an ID (woeID) preserved to link
the two. 

Created by: Brad
Created on: 09/07/2018
"""

import requests

locations = ['london', 'madrid', 'moscow']
location_ids = []
city_outfile = "c:\\temp\\city.csv"
weather_outfile = "c:\\temp\\weather.csv"

# City API Loop, write city info to file,
# store ID in list for weather call
with open(city_outfile, 'w') as file:
    for loc in locations:
        call = {'query': loc}
        request = requests.get('https://www.metaweather.com/api/location/search/?', params=call)
        output = request.json()
        for p in output:
            value_list = []
            p = sorted(p.items(), key=lambda t: t[0])  # Need to sort dict by key to get consistent column order in file
            for key, value in p:
                value_list.append(value)  # Iterate over the dict created by the API call, but just taking the data
                if key == 'woeid':
                    location_ids.append(value)    # Store the woeids in a list here for weather call
            file.write(','.join(map(str, value_list)) + '\n')  # convert from list to comma delimited line and write

# Weather API Loop, write weather info to file,
# uses location id (woeid) from list generated by city API pull
with open(weather_outfile, 'w') as file:
    for loc_id in location_ids:
        request = requests.get('https://www.metaweather.com/api/location/'+str(loc_id)+'/')
        output = request.json()['consolidated_weather']  # We just want to take the weather information here
        for p in output:
            value_list = []
            p = sorted(p.items(), key=lambda t: t[0])  # Need to sort dict by key to get consistent column order in file
            for key, value in p:
                value_list.append(value)
            value_list.append(loc_id)  # add woeid here so we can link to the city file
            file.write(','.join(map(str, value_list)) + '\n')
